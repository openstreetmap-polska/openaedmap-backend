name: deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - "*.md"
  workflow_dispatch:
    inputs:
      tag:
        description: "Deployment tag"
        required: true
        type: choice
        default: "main"
        options:
          - main
          - dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure deployment tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "out=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "out=dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Build container image
        id: image
        run: |
          nix-shell --pure --run true
          image_path=$(nix-build --no-out-link)
          echo "out=$image_path" >> "$GITHUB_OUTPUT"

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id && chmod 600 ~/.ssh/id
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          echo "Host remote
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            Port ${{ secrets.SSH_PORT }}
            IdentityFile ~/.ssh/id
          " > ~/.ssh/config

      - name: Upload container image
        run: scp "${{ steps.image.outputs.out }}" remote:~

      - name: Deploy on remote
        run: |
          ssh remote <<\EOF
            set -e
            tag="${{ steps.tag.outputs.out }}"
            image_filename="$(basename "${{ steps.image.outputs.out }}")"

            cleanup() {
              cd ~
              echo "Cleaning up"
              rm -f "$image_filename"
            }
            trap cleanup EXIT

            echo "Loading Docker image"
            docker load < "$image_filename"

            echo "Fetching latest changes from the git repository"
            cd "$tag"
            git fetch origin main
            git reset --hard origin/main

            echo "Restarting containers"
            docker compose down --remove-orphans
            TAG="$tag" docker compose --env-file "envs/compose/$tag.env" up -d

            echo "Pruning dangling images"
            docker image prune -f
          EOF
