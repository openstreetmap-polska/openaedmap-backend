[project]
dependencies = [
  "alembic",
  "anyio",
  "asyncache",
  "beautifulsoup4[charset-normalizer,lxml]",
  "cachetools",
  "fastapi",
  "feedgen",
  "gunicorn",
  "httpx[brotli,zstd]",
  "jinja2",
  "libvalkey>=4.0.1b1",
  "mapbox-vector-tile",
  "numpy",
  "pillow",
  "pyinstrument",
  "pyproj",
  "python-magic",
  "python-multipart",
  "pytz",
  "scikit-learn",
  "sentry-sdk[fastapi,httpx,sqlalchemy]",
  "shapely",
  "sqlalchemy[postgresql-asyncpg]",
  "starlette-compress",
  "supervisor",
  "tzfpy",
  "uvicorn[standard]",
  "valkey[libvalkey]>=6.0.0",
  "xmltodict",
  "zstandard",
]
name = "openaedmap-backend"
requires-python = "~=3.13"
version = "0.0.0"

[tool.uv]
package = false
python-downloads = "never"
python-preference = "only-system"

[tool.setuptools]
packages = ["."]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
# custom + https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "ARG001", # unused-function-argument
  "ARG002", # unused-method-argument
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "E501", # line-too-long
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "SIM108", # if-else-block-instead-of-if-exp
  "TRY003", # raise-vanilla-args
  "W191", # tab-indentation
]
# see https://docs.astral.sh/ruff/rules/ for rules documentation
select = [
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "E4", # pycodestyle
  "E7",
  "E9",
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FLY", # flynt  # "FURB", # refurb
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "NPY", # numpy
  "PERF", # perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RUF", # ruff
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W6",
  "YTT", # flake8-2020
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["filter", "format", "id", "open", "type"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 10
